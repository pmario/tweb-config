#!/bin/bash
# copyright 2013 Mario Pietsch
# See LICENSE file for copyright and license details
#
# Some ideas of this file were borrowed from
# raspi-config http://github.com/asb/raspi-config
# thanks to: Alex Bradbury

VERSION=0.0.8

# have a look at the log file. It may contain usefull info!
DO_LOGGING=0

# The verbose log file gets much more info. 
# If DO_LOGGING=0 and VERBOSE_LOG=1 the logfile should contain CI commands only. 
# This is usefull to create info for the tiddlyweb devs. 
# After you did adjust the log fiel you can make it executable and it will do, what tweb-config did.
VERBOSE_LOG=0

# This file needs to be in a directory, that is writeable to user www-tweb
LOG_FILE=$PWD/tweb-config.log
CI_LOG_FILE="$LOG_FILE"

# default home
TWEB_HOME=/home/www-tweb

# some functions to create the basic recipes and bags.
# __owner variables will be replaced
#
_fake_bag_private() {
echo "Name: __bag_private
{\"policy\": {\"read\": [\"__owner\"], \"create\": [\"__owner\"], \"manage\": [\"__owner\"], \
\"accept\": [], \"write\": [\"__owner\"], \"owner\": \"__owner\", \"delete\": [\"__owner\"]}, \
\"desc\": \"\"}
"
}

_fake_bag_public() {
echo "Name: __bag_public
{\"policy\": {\"read\": [], \"create\": [], \"manage\": [\"__owner\"], \"accept\": [], \
\"write\": [], \"owner\": \"__owner\", \"delete\": []}, \
\"desc\": \"\"}
"
}

_fake_bag_protected() {
echo "Name: __bag_protected
{\"policy\": {\"read\": [], \"create\": [\"__owner\"], \"manage\": [\"__owner\"], \
\"accept\": [], \"write\": [\"__owner\"], \"owner\": \"__owner\", \"delete\": [\"__owner\"]}, \
\"desc\": \"\"}
"
}

# twanager recipe needs a "special" text format, that can't be produced with twanager lrecipes yet.
# curl would be an option, if you have a running environment. Chicken - Egg problem. 
# this is the hacky way :/
_fake_recipe_public() {
echo "desc: __description
policy: {\"read\": [], \"create\": [], \"manage\": [\"__owner\"], \"accept\": [], \
\"write\": [], \"owner\": \"__owner\", \"delete\": []}

/bags/system/tiddlers
/bags/__bag_protected/tiddlers
/bags/__bag_public/tiddlers
"
}

_fake_recipe_private(){
echo "desc: __description
policy: {\"read\": [\"__owner\"], \"create\": [], \"manage\": [\"__owner\"], \"accept\": [], \
\"write\": [], \"owner\": \"__owner\", \"delete\": []}

/bags/system/tiddlers
/bags/__bag_public/tiddlers
/bags/__bag_protected/tiddlers
/bags/__bag_private/tiddlers
"
}

#_fake_tmp > tmp
#_fake_recipe_public > pub.tmp
#_fake_recipe_private > priv.tmp
#exit 1

# ===================================================================

#
# Info screen for user
#
do_info() {
  whiptail --msgbox --title "Instance Settings" "\
This tool provides a straight-forward way of doing minimal
configuration of TiddlyWeb.

Although it can be run at any time, some of the options may 
have difficulties if you have heavily customised your TiddlyWeb instance.

Command inside an instance directory: tweb-config
" 20 70 1
}

# Submenu
# Info screen for a sudoer. The only sudoer should be user: pi
#
do_info_patch() {
  whiptail --msgbox --title "Patch Menu" "\
This submenu provides some low level functions

* Prepare an instance to be started at boot 

* patch a newly created TWeb instance.
* undo the patch (pmario only functions!)

" 16 70 1
}

#
# Info screen for a sudoer. The only sudoer should be user: pi
#
do_info_sudo() {
  whiptail --msgbox --title "Superuser Menu" "\
This tool provides a straight-forward way of doing minimal
configuration of TiddlyWeb as root user.

Although it can be run at any time, some of the options may 
have difficulties if you have heavily customised your installation.

Possible commands are: 
   'sudo tweb-config' or
   'tweb-config' if you are inside a TW instance directory
" 16 70 1
}

# sudo Submenu
# Info screen for a sudoer. The only sudoer should be user: pi
#
do_info_install() {
  whiptail --msgbox --title "System Update" "\
This submenu provides some convenience functions

* to modify system settings to activate daemontools.
* to activate an exsisting TiddlyWeb instance for autostart. 
  Only one configuration can be active at the moment!
* to update this script

* to upgrade the OS.

" 16 70 1
}

#
# change the OS user password
#
do_change_pass() {
  whiptail --msgbox --title "Change Password" \
  "You will now be asked to enter a new password for the pi user" 20 60 1
  passwd &&
  whiptail --msgbox "Password changed successfully" 20 60 1
  _log "Change OS password for user: $USER" "# passwd" 
}

#
# TODO update the tweb-config script
#
do_sudo_update() {
  local BAK=`date +%Y.%m.%d-%H-%M-%S`
  cd /home/pi
  _log "" "cd /home/pi"

  wget https://raw.github.com/pmario/tweb-config/master/tweb-config
  _log "$FUNCNAME - wget new twebconfig from guthub" \
        "wget https://raw.github.com/pmario/tweb-config/master/tweb-config"

  if [ -f "$PWD/tweb-config" ]; then
    mv "/usr/local/bin/tweb-config" "$PWD/tweb-config.$BAK"
    _log "backup old tweb-config" "mv /usr/local/bin/tweb-config \$PWD/tweb-config.$BAK"

    chmod +x "$PWD/tweb-config"
    _log "make new tweb-config executeable" "chmod +x \$PWD/tweb-config"

    mv "$PWD/tweb-config" "/usr/local/bin/tweb-config"
    _log "move new tweb-config to /usr/local/bin" "mv \$PWD/tweb-config /usr/local/bin/tweb-config"

    if [ -f "/usr/local/bin/tweb-config" ]; then
      rm "$PWD/tweb-config.$BAK"
      _log "remove tweb-config backup file" "rm \$PWD/tweb-config.$BAK"
    fi
    whiptail --msgbox "\"tweb-config\" script updated!" 10 60 1
  else
    #mv "$PWD/tweb-config.$BAK" "/usr/local/bin/tweb-config"
    #chmod +x "/usr/local/bin/tweb-config"
    whiptail --msgbox "ERROR: Something went wrong! Old script still in place!" 10 60 1
  fi

  exec tweb-config
}

#
# write some text to the tweb-config.log file
#
# extract both lines from the log use
# cat tweb-config.log | grep "^#|\$.*"
_log() {
  # extract the following sections from the log file use:
  # cat tweb-config.log | grep "^#.*"
  if [ $DO_LOGGING -eq 1 ] && [ "$1" != "" ]; then
    echo "" >> "$LOG_FILE"
    echo "# $1" >> "$LOG_FILE"
  fi

  # extract the following sections from the log file use:
  # cat tweb-config.log | grep "^\$.*"
  if [ $VERBOSE_LOG -eq 1 ] && [ "$2" != "" ]; then
    echo "$2" >> "$CI_LOG_FILE"
  fi
}

#
# write text plus timestamp to the log file
#
_log_text(){
# simple grep to get the info ...
# grep -i "FAIL" tweb-config.log
# cat tweb-config.log | grep -i "FAIL"
#
# this is a filter for commands
# cat tweb-config.log | sed -n 's;.*\execute command: \(.*\);\1;p'
#
# more specific filter: commands at 14:05 ...
# cat tweb-config.log | sed -n 's;.*14:05.*\execute command: \(.*\);\1;p'
#
  local TEXT
  if [ $DO_LOGGING -eq 1 ]; then
    TEXT=$(date)
    echo "" >> "$LOG_FILE"
    echo "## $TEXT -> $1" >> "$LOG_FILE"
  fi
}

#
# Display a user list from the database
#
do_get_users() {
  local USERS
  local SELECTION

  echo "twanager lusers"
  _log_text "command: twanager lusers"

  USERS=$(twanager lusers | awk '{ print $1 " " $1 }')
  _log "$FUNCNAME - $PWD: " "# twanager lusers | awk '{ print \$1 }'"
  SELECTION=$(whiptail --nocancel  --menu "Found this users: " \
    --title "Existing Users" 20 40 12 $USERS  \
    3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
    TWEB_USER=$SELECTION
  fi

# TODO remove when finised!!
#
# the sed covers the first word in "" and the rest in ""
# twanager lusers | sed -n 's;\([^ ]*\) \(.*\); "\1" "\2";p' | tr '\n' ' ' >> /tmp/tmp.txt
}

#
# Display a recipes list from database
#
do_get_recipes() {
  echo "twanager lrecipes"
  _log_text "command: twanager lrecipes"

  RECIPES=$(twanager lrecipes | grep -i -E -v "^\(.+\)" | awk '{ print $1 " " $1 }')
  _log "$FUNCNAME - $PWD: " "# twanager lrecipes | grep -i -E -v \"^\(.+\)\" | awk '{ print \$1 }'"
  
  whiptail --nocancel --menu "This are the existing TiddlyWikies" --title "Existing TWs" 20 60 12 $RECIPES \
    3>&1 1>&2 2>&3
}

# do_get_recipes && exit 1

#
# Display a bags list form database
#
do_get_bags() {
#  twanager lbags | grep -i Name: | awk '{ print $2 }' > /tmp/bags.txt
#      whiptail --textbox --title "Existing bags" /tmp/bags.txt 10 40

  echo "twanager lbags"
  _log_text "$FUNCNAME - $PWD"
  _log "read existing bags" "# twanager lbags | grep -i Name: | awk '{ print \$2 }' "

  BAGS=$(twanager lbags | grep -i Name: | awk '{ print $2 " " $2}' | tr '\n' ' ' )
  whiptail --nocancel --menu "This are the existing bags" --title "Existing bags" 20 60 12 $BAGS \
    3>&1 1>&2 2>&3
}

# do_get_bags && exit 1

# init TWEB_USER
if [ -z $TWEB_USER ]; then
  TWEB_USER="YourName"
fi

#
# Manually set active user
#
do_set_active_user() {
  TWEB_USER=$(whiptail --inputbox --nocancel --title "Active User: "$TWEB_USER \
    "New User name:" 10 40 $TWEB_USER \
    3>&1 1>&2 2>&3)

  whiptail --msgbox "user was set to: "$TWEB_USER 10 40
  _log_text "active user set to: $TWEB_USER"
}

#
# this function returns a TiddlyWeb password. NOT the system pw
#
_define_password() {
  local PW_B
  local PW_A

  PW_A=$(whiptail --passwordbox --nocancel --title "Enter password" \
    "Enter a password for the new user name: "$TWEB_USER 10 40 \
    3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then 
    PW_B=$(whiptail --passwordbox "Enter the password again" \
      --nocancel --title "Verify password" 10 40 \
    3>&1 1>&2 2>&3)
  fi

  if [ $? -eq 0 ] && [ "$PW_A" != "$PW_B" ]; then
    PW_A=""
    whiptail --msgbox "Passwords have to be the same."  10 40
  fi
  echo "$PW_A"
}

#
# change tweb instance user password
#
do_user_password() {
  local PASSWORD

  do_get_users

  PASSWORD=$(_define_password)

  if [ "$PASSWORD" != "" ] && [ "$TWEB_USER" != "" ]; then
    twanager userpass $TWEB_USER $PASSWORD
    if [ $? -eq 0 ]; then
      _log_text "($FUNCNAME) password changed - user: $TWEB_USER"
      whiptail --msgbox "Password changed for user: \"$TWEB_USER\""  10 40 
     else
      _log_text "($FUNCNAME) change password FAILD - user: $TWEB_USER"
      whiptail --msgbox "Password not changed!"  10 40
    fi
  fi
}

# do_user_password && exit 1

#
# Create a new TiddlyWeb user
#
do_create_user() {
  _log_text "$FUNCNAME - Create new TiddlyWeb user"

  local PASSWORD

  # init user. At the beginning it may be administrator by accident
  TWEB_USER="new-user"
  do_set_active_user

  PASSWORD=$(_define_password)

  if [ "$PASSWORD" != "" ] && [ "$TWEB_USER" != "" ]; then
    _log "\$PASSWORD, will need to be replaced" "twanager adduser $TWEB_USER \$PASSWORD"

    twanager adduser $TWEB_USER $PASSWORD
    if [ $? -eq 0 ]; then
      _log "user created: $TWEB_USER"
      whiptail --msgbox "The new user: \"$TWEB_USER\" created!"  10 40 
     else
      _log "user creation FAILD" 
      whiptail --msgbox "No user created!"  10 40
    fi
  fi
}

# do_create_user && exit 1

# I want to have special names for system stuff. 
# eg: system should be __system
# the following patches change the "default" recipes and bags "system " and "console"

T_RECIPE=$PWD/.recipe.default.bak

D_RECIPE=store/recipes/default
N_RECIPE=store/recipes/__default

BAG_P=store/bags

#
# Rename several predifined recipes and bags
#
# TODO some plugins contain hardcoded references FIX THIS
#
do_patch_tiddlywebwiki() {
  if [ ! -f $N_RECIPE ]; then
#    cat $D_RECIPE | sed -e 's/system/__system/g' | sed -e 's/common/__common/g' > "$N_RECIPE"
    cat $D_RECIPE | sed -e 's/system/__system/g'  > "$N_RECIPE"
    mv "$D_RECIPE" "$T_RECIPE"

    _log_text "pached: $D_RECIPE"
#    _log "`cat $N_RECIPE`"
    _log_text "renamed: $D_RECIPE -> $N_RECIPE"
    _log_text "moved: $D_RECIPE -> $T_RECIPE"
  fi

  if [ -d $BAG_P/system ]; then
    mv $BAG_P/system $BAG_P/__system
    _log_text "renamed: $BAG_P/system -> $BAG_P/__system"
  fi

#  if [ -d $BAG_P/console ]; then
#    mv $BAG_P/console $BAG_P/__console
#    _log_text "renamed: $BAG_P/console -> $BAG_P/__console"
#  fi
}

# do_patch_tiddlywebwiki && exit 1

# Removing the patch is for testing this file only. 
# It may break stuff, if you copy the backup recipe back to its old position
# It may have been changed allredy! ....
do_restore_tiddlywebwiki() {
  if [ -f $T_RECIPE ]; then
    mv $T_RECIPE $D_RECIPE
    rm $N_RECIPE
    mv $BAG_P/__system $BAG_P/system
    mv $BAG_P/__console $BAG_P/console
  fi
}
# do_restore_tiddlywebwiki && exit 1

#
# Define a new recipe name to create a new TiddlyWiki
#
_define_recipe_name() {
  RECIPE_NAME=$(whiptail --inputbox --nocancel --title "Create New TiddlyWiki" \
    "New TiddlyWiki Name:" 10 40 "MyNewTW" \
    3>&1 1>&2 2>&3)
}

# server IP and  port default value
SERVER_PORT=8080
_IP=`hostname -I`

_define_port() {
  SERVER_PORT=$(whiptail --inputbox --nocancel --title "Server ($_IP) Port: "$SERVER_PORT \
    "Define Server Port: (eg: 8080, 8081, 9090)" 10 40 $SERVER_PORT \
    3>&1 1>&2 2>&3)

  whiptail --msgbox "server address will be similar to: "$_IP":"$SERVER_PORT 10 40
}

_get_port() {
  local PORT
  # the service/run file contains a PORT variable. Get it!
  PORT=$(cat $1 | sed -n 's;PORT=\([0-9]*\).*;\1;p')
  echo $PORT
}

#
# Create directories and "run" files for service daemon
#
do_prepare_daemon() {
  _log_text "$FUNCNAME - $PWD: prepare instance to be autostarted at boot."

  local DIR="$PWD"
  local RUN_FILE="$DIR"/service/run
  local LOG_RUN_FILE="$DIR"/service/log/run

  whiptail --yesno "Prepare autostart in dir: $DIR \
\"/service\" directory and \"run\" files will be created" 10 50 \
    3>&1 1>&2 2>&3

  if [ $? -eq 0 ] && [ ! -f "$RUN_FILE" ]; then

    _define_port
    _log "Server Port set to: $SERVER_PORT"
    
    echo create the /service directory in: "$PWD"
    mkdir "$DIR"/service
    mkdir "$DIR"/service/log
    mkdir "$DIR"/service/log/main

    # these commands are not sudo
    _log "create the /service directory in: $PWD" \
          "mkdir \$PWD/service && mkdir \$PWD/service/log && mkdir \$PWD/service/log/main"

    echo create "$RUN_FILE"

    # be carefull. !
    # The "$DIR" in the "cd" line below, needs to be substituted!
    echo "#!/bin/sh
# This file has been automatically generated by tweb-config. 
# If you change the port address, you should also change the symbolic link at the
# /service directory, if it exists allready. eg: tweb-8080  to tweb-????
cd "$DIR"
_IP=\$(hostname -I) || true
PORT=$SERVER_PORT

if [ \"\$_IP\" ]; then
  exec setuidgid www-tweb authbind twanager server \$_IP \$PORT
else
  exec setuidgid www-tweb authbind twanager server
fi" > "$RUN_FILE"

    _log "To see the daemon start script type:" "# cat $RUN_FILE"
    
    chmod +x "$RUN_FILE"
    _log "Make daemon start script executable" "chmod +x $RUN_FILE"

    echo create "$LOG_RUN_FILE"
    echo "#!/bin/sh
exec setuidgid www-tweb multilog t ./main" > "$LOG_RUN_FILE"

    _log "To see the daemon log script type:" "# cat $LOG_RUN_FILE"

    chmod +x "$LOG_RUN_FILE"
    _log "Make daemon log script executable" "chmod +x $LOG_RUN_FILE"

    echo '---- done ----'
    _log_text "$FUNCNAME - instance daemon preparation in: $DIR/service - done"
    sleep 2
  else
    whiptail --msgbox "User canceled or run files exist" 10 40
    _log_text "Instance daemon preparation canceled: User canceled or run files exist"
  fi
}
# do_prepare_daemon && exit 1

#
# All steps needed to create a new TiddlyWiki
#
do_create_tiddlywiki() {
  _log_text "$FUNCNAME - Create a new TiddlyWiki"

  _define_recipe_name

  do_get_users

  echo ""
  echo "Be patient - It may take several seconds :)"

  whiptail --yesno "Create a new TiddlyWiki named: $RECIPE_NAME \
    for the user: $TWEB_USER " 10 50 \
    3>&1 1>&2 2>&3

  RECIPE_DESCRIPTION="Here comes the TW description TODO"

  # name dialog must be OK, recipe must not exists, recipe name must be set.
  if [ $? -eq 0 ] && [ ! -f $RECIPE_NAME"__public" ] && [ $RECIPE_NAME != "" ]; then

    # TODO fix this! 

    local TMP_PRE=_recipe_"$RECIPE_NAME"
    local TMP_R_PRIVATE="$TMP_PRE"_private
    local TMP_R_PUBLIC="$TMP_PRE"_public

    local R_PRIVATE="$RECIPE_NAME"_private
    local R_PUBLIC="$RECIPE_NAME"_public
    
    _fake_recipe_public | \
      sed -e 's;__owner;'$TWEB_USER';g' -e 's;__bag;'$RECIPE_NAME';g' \
          -e 's;__description;'"$RECIPE_DESCRIPTION"';g' > "$TMP_R_PUBLIC"
          
    _log "Temporary recipe file: $TMP_R_PUBLIC" "cat <<EOT > $TMP_R_PUBLIC"
    _log "" "`cat $TMP_R_PUBLIC`"
    _log "" "EOT"

    _fake_recipe_private | \
      sed -e 's;__owner;'$TWEB_USER';g' -e 's;__bag;'$RECIPE_NAME';g' \
          -e 's;__description;'"$RECIPE_DESCRIPTION"';g' > "$TMP_R_PRIVATE"

    _log "Temporary recipe file: $TMP_R_PRIVATE" "cat <<EOT > $TMP_R_PRIVATE"
    _log "" "`cat $TMP_R_PRIVATE`"
    _log "" "EOT"

    # give some visual feedback
    echo "creating recipes ..."

    twanager recipe "$R_PUBLIC" < "$TMP_R_PUBLIC"
    _log "Create $R_PUBLIC recipe" "twanager recipe $R_PUBLIC < $TMP_R_PUBLIC"

    twanager recipe "$R_PRIVATE" < "$TMP_R_PRIVATE"
    _log "Create $R_PRIVATE recipe" "twanager recipe $R_PRIVATE < $TMP_R_PRIVATE"

    # this works but imo is ugly. TODO make it better
    twanager lbags __bag_private __bag_public __bag_protected > tmp

    # TODO feature request: twanager should have a silent option.
    # if twanager fails tmp is zerro size
    if [ ! -s tmp ]; then
       echo ""
       echo "INFO: Use tweb-config default settings! - No template bags available"
       _fake_bag_private | sed -n 2p | sed -e 's;__owner;'$TWEB_USER';g' > "$PWD"/_bag_private
       _fake_bag_public  | sed -n 2p | sed -e 's;__owner;'$TWEB_USER';g' > "$PWD"/_bag_public
       _fake_bag_protected | sed -n 2p | sed -e 's;__owner;'$TWEB_USER';g' > "$PWD"/_bag_protected
    else
      cat tmp | sed -n 2p | sed -e 's;__owner;'$TWEB_USER';g' > "$PWD"/_bag_private
      cat tmp | sed -n 5p | sed -e 's;__owner;'$TWEB_USER';g' > "$PWD"/_bag_public
      cat tmp | sed -n 8p | sed -e 's;__owner;'$TWEB_USER';g' > "$PWD"/_bag_protected
    fi

    # give some feedback
    echo "creating bags ..."

    # hardcore TODO fix 
    twanager bag "$RECIPE_NAME"_private   < "$PWD"/_bag_private
    twanager bag "$RECIPE_NAME"_public    < "$PWD"/_bag_public
    twanager bag "$RECIPE_NAME"_protected < "$PWD"/_bag_protected

    # logging the above 3 commands for VERBOSE mode
    local BAG="$RECIPE_NAME"_private
    _log "Temporary bag: $BAG" "cat <<EOT > _bag_private"
    _log "" "`cat _bag_private`"
    _log "" "EOT"
    _log "Create private bag: $BAG" "twanager bag $BAG < _bag_private"
    
    BAG="$RECIPE_NAME"_public
    _log "Temporary bag: $BAG" "cat <<EOT > _bag_public"
    _log "" "`cat _bag_public`"
    _log "" "EOT"
    _log "Create public bag: $BAG" "twanager bag $BAG < _bag_public"

    BAG="$RECIPE_NAME"_protected
    _log "Temporary bag: $BAG" "cat <<EOT > _bag_protected"
    _log "" "`cat _bag_protected`"
    _log "" "EOT"
    _log "Create protected bag: $BAG" "twanager bag $BAG < _bag_protected"

    # log only one line for DEBUG mode.
    _log_text "TiddlyWiki: $RECIPE_NAME for user: $TWEB_USER - created"

  else
    _log_text "ERROR create: TiddlyWiki: $RECIPE_NAME for user: $TWEB_USER"
    whiptail --msgbox "ERROR: No TW created" 10 40
  fi
  
  # if verbose logging is active, don't delete the temporary files. 
  if [ $VERBOSE_LOG -ne 1 ]; then
    rm _*
  fi
}
#do_create_tiddlywiki && exit 1

do_finish() {
  echo ""
  echo -- Setup complete!
  echo -- You can start your server now with eg:
  echo -- twanager server $(hostname -I) 8080
  echo ""
  exit 0
}

#
# Interactive user loop without root access
#

user_menu() {

clear

_log_text "== enter user mode ===="

  while true; do
    FUN=$(whiptail --menu "TiddlWeb at home - Active user is: "$TWEB_USER \
      --title "Instance Settings" \
      18 80 10 --cancel-button Finish --ok-button Select \
      "info" "Information about this tool" \
      "get_users" "1 - Show a list of users" \
      "create_user" "2 - Create a new user" \
      "create_tiddlywiki" "3 - Create a new TiddlyWiki" \
      "get_recipes" "Show existing TiddlyWiki (recipes)" \
      "get_bags" "Show existing bags" \
      "user_password" "Set a new user password" \
      "patch_menu" "(submenu) Prepare instance to run at boot" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      do_finish
    elif [ $RET -eq 0 ]; then
      clear
      echo "command: $FUN - in action! ..."
      "do_$FUN" || whiptail --msgbox "There was an error running do_$FUN" 20 60 1
    else
      exit 1
    fi
  done
}

#
# whiptail doesn't provide a menu space line
#
do_nothing() {
  echo ""
}

#
# Some low level instance functions for standard user mode
#
do_patch_menu() {
  local BACK=0
  while [ $BACK == 0 ]; do
    FUN=$(whiptail --menu "TiddlWeb at home - Active user is: "$TWEB_USER \
      --title "Patch Instance" \
      14 80 5 --cancel-button MainMenu --ok-button Select \
      "info_patch" "Information about this submenu" \
      "prepare_daemon" "Prepare TWeb for autorun at startup" \
      "nothing"        "..................................." \
      "patch_tiddlywebwiki" "(patch) Prepare TiddlyWebWiki" \
      "restore_tiddlywebwiki" "(restore) Restore TiddlyWebWiki" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      BACK=1
    elif [ $RET -eq 0 ]; then
      clear
      echo "command: $FUN - in action! ..."
      "do_$FUN" || whiptail --msgbox "There was an error running do_$FUN" 20 60 1
    else
      exit 1
    fi
  done
}

# ====================================================
# vvvvvvvvvvvvvv  User needs to be sudoer !!!

#
# update the operating system.
#
do_sudo_upgrade() {
  whiptail --title "Upgrade the OS" --yesno "This command will run:

sudo apt-get -y update
sudo apt-get -y upgrade

Depending on your SD card this may take several minutes!
" 15 50 \
    3>&1 1>&2 2>&3

  # name dialog must be OK,
  if [ $? -eq 0 ]; then
    apt-get -y update
    apt-get -y upgrade

    _log "Update the system" "# apt-get -y update"
    _log "" "# apt-get -y upgrade"
    echo ---- done ----
    sleep 5
  fi
}

#
# install dependencies for tiddlyweb
#
do_sudo_get_dependencies() {
  whiptail --title "Get TiddlyWeb dependencies" --yesno "This command will run:

sudo apt-get install python2.7-dev python-pip git mc htop csh authbind

It may take several minutes!
" 15 50 \
    3>&1 1>&2 2>&3

  # name dialog must be OK,
  if [ $? -eq 0 ]; then
    apt-get -y install python2.7-dev python-pip git mc htop csh authbind
    _log "Install tiddlyweb dependencies" \
          "# apt-get -y install python2.7-dev python-pip git mc htop csh authbind"
    echo ---- done ----
    sleep 5
  fi
}

#
# create a new www-tweb user. Be aware, this is a system user
#
do_sudo_adduser() {
# see: http://www.debianadmin.com/users-and-groups-administration-in-linux.html

  whiptail --title "Create www-tweb user" --yesno "This command will run:

sudo adduser www-tweb

You will be asked for the initial password!
" 15 50 \
    3>&1 1>&2 2>&3

  # name dialog must be OK, 
  if [ $? -eq 0 ]; then
    adduser www-tweb
    _log "add \"www-tweb\" user to the system" "# adduser www-tweb"
    echo ---- done ----
    sleep 5
  fi
}

#
# install tiddlywebwiki package from pypi repositories
#
do_sudo_pip_tiddlywebwiki() {
# see: http://www.debianadmin.com/users-and-groups-administration-in-linux.html

  whiptail --title "Install TiddlyWebWiki" --yesno "This command will run:

sudo pip install -U tiddlywebwiki

It may take several minutes!
" 15 50 \
    3>&1 1>&2 2>&3

  # name dialog must be OK, 
  if [ $? -eq 0 ]; then
    pip install -U tiddlywebwiki
    _log "pip install tiddlywebwiki" "# pip install -U tiddlywebwiki"
    echo ---- done ----
    sleep 5
  fi
}

#
# BE CAREFUL when testing. Rename the ETC_RC_LOCAL variable
# This command inserts the svscanboot command into /etc/rc.local
# Since it is not the only command there, the "exit 0" line has to be shifted
# It runs a test against the rc.local file. If "www-tweb" is there, the file is NOT modified
#
do_sudo_prepare_rc_local() {
  local ETC_RC_LOCAL="/etc/rc.local"

  whiptail --title "Prepare Server Autostart" --yesno "This command will add daemontools settings
to $ETC_RC_LOCAL

# www-tweb deamontools settings
echo ------------------------------
echo Starting the TiddlyWeb server!

csh -cf '/usr/bin/svscanboot &'

echo type: cat /var/log/svscan  -  to see any errors
echo -----------------------------------------------

" 20 60 \
    3>&1 1>&2 2>&3

  # name dialog must be OK,
  if [ $? -eq 0 ]; then

    # check if content is allready there and prepare the web daemon
    if [ -z "$(cat $ETC_RC_LOCAL | grep -i www-tweb)" ]; then

      # !!! be carefull about the sed comand. It is tricky
      # the following command searches for "^exit 0" and replaces it with content
      # and saves it back to the file
      sed -i "/^exit 0/ {
        a #\n\
# Created by tweb-conf script. Do NOT change the enclosing comments!\n\
# www-tweb deamontools settings\n\
echo ------------------------------\n\
echo Starting the TiddlyWeb server!\n\n\
csh -cf '/usr/bin/svscanboot &'\n\n\
echo type: cat /var/log/svscan  -  to see any errors\n\
echo -----------------------------------------------\n
        a exit 0\n
        d
      }" $ETC_RC_LOCAL

      echo "create the /service directory!"
      mkdir /service
    else 
      whiptail --msgbox "$ETC_RC_LOCAL is allready modified. No changes applyed!" 10 40
    fi
    
    _log "modified $ETC_RC_LOCAL to activate daemontools at boot" "# cat $ETC_RC_LOCAL" 
#    _log "" "`cat $ETC_RC_LOCAL`"
    echo ---- done ----
    sleep 3
  fi
}

# function to show running supervise processes
# ps axjf | grep -o "supervise [^log][a-zA-Z].*"

do_sudo_tweb_autostart() {
  local INSTANCES
  local SELECTION
  local SERVICE_NAME

  echo "List instances - make sure you did prepare the tweb instances!"
  _log "command, to find existing daemon configurations" \
        "# find /home/www-tweb -name run | sed -n 's;.*-tweb/\([^/]*\)/service/run.*;\1;p'"

  #INSTANCES=$(ls -w 1 "$TWEB_HOME" | awk '{ print $1 " " $1 }')
  
  # only directories which contain tiddlywebconfig.py are possible instances
  #INSTANCES=$(find /home/www-tweb . -maxdepth 2 -name "tiddlywebconfig.py" | \
  #            sed -n 's;.*-tweb/\(.*\)/tiddlywebconfig.py;\1 \1;p')

  # only instances that actually have a service/run file can be used
  INSTANCES=$(find /home/www-tweb -name run | sed -n 's;.*-tweb/\([^/]*\)/service/run.*;\1 \1;p' )

  SELECTION=$(whiptail --nocancel  --menu "
Autostart instances need a 'service/run' file.
If this list is empty, you need to prepare the instance!

Select one:" \
    --title "Select a possible instance" 20 40 8 $INSTANCES  \
    3>&1 1>&2 2>&3)

  if [ $? -eq 0 ]; then
    # old. this lists all directories.
    #local RUNNING_WEBS=$(ps axjf | grep -o "supervise [^log][a-zA-Z].*" | awk '{ print $2 }')

    local RUNNING_WEBS=

    SERVICE_NAME="$SELECTION-"$(_get_port "/home/www-tweb/$SELECTION/service/run")
    
    if [ -z "$RUNNING_WEBS"  ]; then
      echo create link /service/"$SERVICE_NAME"
      echo it takes up to 5 seconds!
      ln -s "$TWEB_HOME"/"$SELECTION"/service /service/"$SERVICE_NAME"

      _log "activate instance: $SELECTION as service" \
            "# ln -s $TWEB_HOME/$SELECTION/service /service/$SERVICE_NAME"

      sleep 6
      svok /service/"$SERVICE_NAME"
      if [ $? -eq 0 ]; then
        whiptail --msgbox "process started successfully!" 10 40
      else
        _log "ERROR: svok /service/$SERVICE_NAME" "# cat /var/log/svscan"
        #_log "`cat /var/log/svscan`"
        cat /var/log/svscan
        sleep 10
      fi
    else
      echo "there is an instance running. It must be down.
tweb-config can't handle this situation yet!
use \"sudo svc -d /service/????\" to close a runnig instance
or
remove the links from /service directory!"
      sleep 10
    fi
  fi
}

#
# The final dialog just prints some info about the next steps to the command line
#

do_tweb_message() {
  whiptail --title "Final Dialog" --yesno "This menu will be closed now.

Log in with \"su www-tweb\" - su will ask for the password!

Start \"tweb-config\" (NO sudo) again for more stuff to do!

" 15 50 \
    3>&1 1>&2 2>&3

  # name dialog must be OK, 
  if [ $? -eq 0 ]; then
    echo "type: "
    echo "-- su www-tweb"
    echo "-- cd ~"
    echo "-- twinstance tweb"
    echo "-- cd tweb"
    echo "-- tweb-config"
    exit 1
  fi
}

#
# Interactive user loop where root access is needed.
#
root_menu() {
clear
_log_text "== enter root mode ===="
  while true; do
    FUN=$(whiptail --title "Superuser Menu" \
      --menu "IMPORTANT: Read the info provided by the commands!" \
      14 80 6 --cancel-button Finish --ok-button Select \
      "info_sudo" "1 - Information about this tool in super user mode" \
      "sudo_get_dependencies" "2 - Install TiddlyWeb dependencies" \
      "sudo_adduser" "3 - Add the www-tweb user to the system" \
      "sudo_pip_tiddlywebwiki" "4 - Install / Update the TiddlWebWiki system" \
      "tweb_message" "5 - Log in as www-tweb user" \
      "install_menu" "(submenu) System Update" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      do_finish
    elif [ $RET -eq 0 ]; then
      clear
      echo "command: $FUN - in action! ..."
      "do_$FUN" || whiptail --msgbox "There was an error running do_$FUN" 20 60 1
    else
      exit 1
    fi
  done
}


#==================================
# Installation menu functions

do_install_menu() {
  local BACK=0
  while [ $BACK == 0 ]; do
    FUN=$(whiptail --title "Sytem Update" \
      --menu "IMPORTANT: Read the info provided by the commands!" \
      14 80 6 --cancel-button MainMenu --ok-button Select \
      "info_install" "Information about system updates / autostart mode" \
      "sudo_prepare_rc_local" "Activate daemontools boot process" \
      "sudo_tweb_autostart" "Activate a TWeb project for autostart" \
      "sudo_update" "Update tweb-config script" \
      "nothing"       "................................................" \
      "sudo_upgrade" "Upgrade the operating system" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
       BACK=1
    elif [ $RET -eq 0 ]; then
      clear
      echo "command: $FUN - in action! ..."
      "do_$FUN" || whiptail --msgbox "There was an error running do_$FUN" 20 60 1
    else
      exit 1
    fi
  done
}

# Everything else needs to be run as root
if [ $(id -u) -eq 0 ]; then
    root_menu
    exit 0
else
  # test if we are inside a TW instance directory.
  if [ -e $PWD/tiddlywebconfig.py ]; then
    user_menu
    exit 0
  else
    echo "-- You need to be user www-tweb inside a TW instance directory (tweb)"
    echo "-- cd tweb or \"twinstance tweb && cd tweb\""
    echo "-- OR: You need to start with 'sudo tweb-config' as user 'pi'"
    exit 1
  fi
fi
